{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"D:\\\\Reva\\\\Major Project\\\\peteria002\\\\routes\\\\RootNav.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport 'react-native-gesture-handler';\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport firebase from 'firebase';\nvar RootStack = createStackNavigator();\nimport DrawerNavigator from \"./DrawerNav\";\nimport SplashScreen from \"../screen/Splash\";\nimport SignInScreen from \"../screen/SignIn\";\nimport SignUpScreen from \"../screen/SignUp\";\nimport { AuthContext } from \"../components/Context\";\nexport default function () {\n  var initialLoginState = {\n    isLoading: true,\n    userEmail: null,\n    userToken: null\n  };\n\n  var loginReducer = function loginReducer(prevState, action) {\n    switch (action.type) {\n      case \"RETRIEVE_TOKEN\":\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case \"LOGIN\":\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: action.id,\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case \"LOGOUT\":\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: null,\n          userToken: null,\n          isLoading: false\n        });\n\n      case \"REGISTER\":\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: action.id,\n          userToken: action.token,\n          isLoading: false\n        });\n    }\n  };\n\n  var _React$useReducer = React.useReducer(loginReducer, initialLoginState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      loginState = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      signUp: function signUp(email, password) {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(function (userCredential) {\n          alert(\"User Registered Successfully.\");\n          var user = userCredential.user;\n          console.log(user);\n          dispatch({\n            type: 'REGISTER',\n            id: user.email,\n            token: user.refreshToken\n          });\n        }).catch(function (error) {\n          alert(error.message);\n        });\n      },\n      signIn: function signIn(email, password) {\n        firebase.auth().signInWithEmailAndPassword(email, password).then(function (userCredential) {\n          alert(\"Login Successful.\");\n          var user = userCredential.user;\n          console.log(user);\n          dispatch({\n            type: 'LOGIN',\n            id: user.email,\n            token: user.refreshToken\n          });\n        }).catch(function (error) {\n          alert(error.message);\n        });\n      },\n      signOut: function signOut() {\n        firebase.auth().signOut().then(function () {\n          console.log(\"Token is null\");\n          alert(\"Sign out Successful\");\n          dispatch({\n            type: 'LOGOUT'\n          });\n        }).catch(function (error) {\n          alert(error.message);\n        });\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    setTimeout(function () {\n      var userToken;\n      userToken = 'initial token';\n      console.log(userToken);\n      dispatch({\n        type: 'RETRIEVE_TOKEN',\n        token: userToken\n      });\n    }, 1000);\n  }, []);\n\n  if (loginState.isLoading) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, loginState.userToken !== null ? React.createElement(DrawerNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }) : React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, React.createElement(RootStack.Navigator, {\n    headerMode: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, React.createElement(RootStack.Screen, {\n    name: \"SplashScreen\",\n    component: SplashScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }), React.createElement(RootStack.Screen, {\n    name: \"SignInScreen\",\n    component: SignInScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  }), React.createElement(RootStack.Screen, {\n    name: \"SignUpScreen\",\n    component: SignUpScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["D:/Reva/Major Project/peteria002/routes/RootNav.js"],"names":["React","NavigationContainer","createStackNavigator","firebase","RootStack","DrawerNavigator","SplashScreen","SignInScreen","SignUpScreen","AuthContext","initialLoginState","isLoading","userEmail","userToken","loginReducer","prevState","action","type","token","userName","id","useReducer","loginState","dispatch","authContext","useMemo","signUp","email","password","auth","createUserWithEmailAndPassword","then","userCredential","alert","user","console","log","refreshToken","catch","error","message","signIn","signInWithEmailAndPassword","signOut","useEffect","setTimeout","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\r\nimport * as React from 'react';\r\n\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { View, ActivityIndicator } from 'react-native';\r\n\r\nimport firebase from 'firebase';\r\n\r\n\r\nconst RootStack = createStackNavigator();\r\n\r\n\r\nimport DrawerNavigator from \"./DrawerNav\";\r\n\r\nimport SplashScreen from \"../screen/Splash\";\r\nimport SignInScreen from \"../screen/SignIn\";\r\nimport SignUpScreen from \"../screen/SignUp\";\r\n\r\nimport { AuthContext } from \"../components/Context\";\r\n\r\nexport default function() {\r\n    // const [isLoading, setIsLoading] = React.useState(true);\r\n    // const [userToken, setUserToken] = React.useState(null);\r\n\r\n    const initialLoginState = {\r\n        isLoading: true,\r\n        userEmail: null,\r\n        userToken: null,\r\n    };\r\n\r\n    const loginReducer = (prevState, action) => {\r\n        switch( action.type ){\r\n            case \"RETRIEVE_TOKEN\":\r\n                return {\r\n                    ...prevState,\r\n                    userToken: action.token, \r\n                    isLoading:false,\r\n                };\r\n            case \"LOGIN\":\r\n                return {\r\n                    ...prevState,\r\n                    userName:action.id,\r\n                    userToken: action.token,\r\n                    isLoading:false,\r\n                };\r\n            case \"LOGOUT\": \r\n            return {\r\n                ...prevState,\r\n                userName:null,\r\n                userToken: null,\r\n                isLoading:false,\r\n            };\r\n            case \"REGISTER\":\r\n                return {\r\n                    ...prevState,\r\n                    userName:action.id,\r\n                    userToken: action.token,\r\n                    isLoading:false,\r\n                };\r\n        }\r\n    }\r\n\r\n    const [loginState, dispatch] = React.useReducer(loginReducer, initialLoginState);\r\n\r\n\r\n    const authContext = React.useMemo(() => ({\r\n        \r\n        signUp: (email,password) => {\r\n\r\n            firebase.auth().createUserWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                // Signed in\r\n                alert(\"User Registered Successfully.\");\r\n                let user = userCredential.user; \r\n                console.log(user);\r\n                dispatch({type: 'REGISTER', id:user.email, token: user.refreshToken});\r\n                })\r\n            .catch((error) => {\r\n                alert(error.message);\r\n            });\r\n\r\n        },\r\n\r\n        signIn: (email,password) => { \r\n\r\n            firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then((userCredential) => {\r\n                // Signed in\r\n                alert(\"Login Successful.\");\r\n                let user = userCredential.user; \r\n                console.log(user);\r\n                dispatch({type: 'LOGIN', id:user.email, token: user.refreshToken});\r\n                // ...\r\n            })\r\n            .catch((error) => {\r\n              alert(error.message);\r\n            });\r\n            \r\n        },\r\n\r\n        signOut: () => {\r\n        \r\n            firebase.auth().signOut()\r\n            .then(() => {\r\n                console.log(\"Token is null\");\r\n                alert(\"Sign out Successful\");\r\n                dispatch({type:'LOGOUT'});\r\n            })\r\n            .catch((error) => {\r\n                alert(error.message);\r\n            });\r\n       \r\n        },\r\n\r\n    }),[]);\r\n\r\n    React.useEffect(() => {\r\n        setTimeout(() => {\r\n            // setIsLoading(false);\r\n            let userToken;\r\n            userToken='initial token';\r\n            console.log(userToken);\r\n            dispatch({type: 'RETRIEVE_TOKEN', token:userToken});\r\n        },1000);\r\n    }, []);\r\n\r\n\r\n    if( loginState.isLoading ){\r\n        return(\r\n            <View style={{flex:1, justifyContent:'center',alignItems:'center'}}>\r\n                <ActivityIndicator size=\"large\"/>\r\n            </View>\r\n        )\r\n    }\r\n    return(\r\n        <AuthContext.Provider value={authContext}>\r\n            { loginState.userToken !== null ? \r\n                <DrawerNavigator /> \r\n            :\r\n            <NavigationContainer>\r\n                <RootStack.Navigator headerMode='none'>\r\n                    <RootStack.Screen name=\"SplashScreen\" component={SplashScreen} />\r\n                    <RootStack.Screen name=\"SignInScreen\" component={SignInScreen} />\r\n                    <RootStack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\r\n                </RootStack.Navigator>\r\n            </NavigationContainer>\r\n            }\r\n        </AuthContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}