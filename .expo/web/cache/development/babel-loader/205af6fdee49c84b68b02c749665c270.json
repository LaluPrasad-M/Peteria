{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"D:\\\\Major Project\\\\peteria\\\\routes\\\\RootNav.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nvar RootStack = createStackNavigator();\nimport DrawerNavigator from \"./DrawerNav\";\nimport SplashScreen from \"../screen/Splash\";\nimport SignInScreen from \"../screen/SignIn\";\nimport SignUpScreen from \"../screen/SignUp\";\nimport { AuthContext } from \"../components/Context\";\nexport default function () {\n  var initialLoginState = {\n    isLoading: true,\n    userName: null,\n    userToken: null\n  };\n\n  var loginReducer = function loginReducer(prevState, action) {\n    switch (action.type) {\n      case \"RETRIEVE_TOKEN\":\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case \"LOGIN\":\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: action.id,\n          userToken: action.Token,\n          isLoading: false\n        });\n\n      case \"LOGOUT\":\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: null,\n          userToken: null,\n          isLoading: false\n        });\n\n      case \"REGISTER\":\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: action.id,\n          userToken: action.Token,\n          isLoading: false\n        });\n    }\n  };\n\n  var _React$useReducer = React.useReducer(loginReducer, initialLoginState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      loginState = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(userName, password) {\n        var userToken;\n        userToken = null;\n\n        if (userName == 'user' && password == 'password') {\n          userToken = \"asdf\";\n        }\n\n        console.log(userToken);\n        dispatch({\n          type: 'LOGIN',\n          id: userName,\n          token: userToken\n        });\n      },\n      signOut: function signOut() {\n        dispatch({\n          type: 'LOGOUT'\n        });\n      },\n      signUp: function signUp() {\n        setUserToken(\"asdf\");\n        setIsLoading(false);\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    setTimeout(function () {\n      console.log(userToken);\n      dispatch({\n        type: 'RETRIEVE_TOKEN',\n        token: null\n      });\n    }, 1000);\n  }, []);\n\n  if (loginState.isLoading) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, loginState.userToken !== null ? React.createElement(DrawerNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }) : React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, React.createElement(RootStack.Navigator, {\n    headerMode: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, React.createElement(RootStack.Screen, {\n    name: \"SplashScreen\",\n    component: SplashScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }), React.createElement(RootStack.Screen, {\n    name: \"SignInScreen\",\n    component: SignInScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }), React.createElement(RootStack.Screen, {\n    name: \"SignUpScreen\",\n    component: SignUpScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["D:/Major Project/peteria/routes/RootNav.js"],"names":["React","NavigationContainer","createStackNavigator","RootStack","DrawerNavigator","SplashScreen","SignInScreen","SignUpScreen","AuthContext","initialLoginState","isLoading","userName","userToken","loginReducer","prevState","action","type","token","id","Token","useReducer","loginState","dispatch","authContext","useMemo","signIn","password","console","log","signOut","signUp","setUserToken","setIsLoading","useEffect","setTimeout","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\n\r\nimport { View, ActivityIndicator } from 'react-native';\r\n\r\nconst RootStack = createStackNavigator();\r\n\r\n\r\nimport DrawerNavigator from \"./DrawerNav\";\r\n\r\nimport SplashScreen from \"../screen/Splash\";\r\nimport SignInScreen from \"../screen/SignIn\";\r\nimport SignUpScreen from \"../screen/SignUp\";\r\n\r\nimport { AuthContext } from \"../components/Context\";\r\n\r\nexport default function() {\r\n    // const [isLoading, setIsLoading] = React.useState(true);\r\n    // const [userToken, setUserToken] = React.useState(null);\r\n\r\n    const initialLoginState = {\r\n        isLoading: true,\r\n        userName: null,\r\n        userToken: null,\r\n    };\r\n\r\n    const loginReducer = (prevState, action) => {\r\n        switch( action.type ){\r\n            case \"RETRIEVE_TOKEN\":\r\n                return {\r\n                    ...prevState,\r\n                    userToken: action.token,\r\n                    isLoading:false,\r\n                };\r\n            case \"LOGIN\":\r\n                return {\r\n                    ...prevState,\r\n                    userName:action.id,\r\n                    userToken: action.Token,\r\n                    isLoading:false,\r\n                };\r\n            case \"LOGOUT\": \r\n            return {\r\n                ...prevState,\r\n                userName:null,\r\n                userToken: null,\r\n                isLoading:false,\r\n            };\r\n            case \"REGISTER\":\r\n                return {\r\n                    ...prevState,\r\n                    userName:action.id,\r\n                    userToken: action.Token,\r\n                    isLoading:false,\r\n                };\r\n        }\r\n    }\r\n\r\n    const [loginState, dispatch] = React.useReducer(loginReducer, initialLoginState);\r\n\r\n\r\n    const authContext = React.useMemo(() => ({\r\n        signIn: (userName, password) => {\r\n            // setUserToken(\"asdf\");\r\n            // setIsLoading(false);\r\n\r\n            let userToken;\r\n            userToken=null;\r\n            if(userName == 'user' && password=='password') {\r\n                userToken = \"asdf\"; \r\n            }\r\n            console.log(userToken);\r\n            dispatch({type: 'LOGIN', id:userName, token: userToken});\r\n        },\r\n        signOut: () => {\r\n            // setUserToken(null);\r\n            // setIsLoading(false);\r\n            dispatch({type:'LOGOUT'});\r\n\r\n        },\r\n        signUp: () => {\r\n            setUserToken(\"asdf\");\r\n            setIsLoading(false);\r\n        },\r\n    }),[]);\r\n\r\n    React.useEffect(() => {\r\n        setTimeout(() => {\r\n            // setIsLoading(false);\r\n            console.log(userToken);\r\n            dispatch({type: 'RETRIEVE_TOKEN', token:null});\r\n        },1000);\r\n    }, []);\r\n\r\n\r\n    if( loginState.isLoading ){\r\n        return(\r\n            <View style={{flex:1, justifyContent:'center',alignItems:'center'}}>\r\n                <ActivityIndicator size=\"large\"/>\r\n            </View>\r\n        )\r\n    }\r\n    return(\r\n        <AuthContext.Provider value={authContext}>\r\n            { loginState.userToken !== null ? \r\n                <DrawerNavigator /> \r\n            :\r\n            <NavigationContainer>\r\n                <RootStack.Navigator headerMode='none'>\r\n                    <RootStack.Screen name=\"SplashScreen\" component={SplashScreen} />\r\n                    <RootStack.Screen name=\"SignInScreen\" component={SignInScreen} />\r\n                    <RootStack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\r\n                </RootStack.Navigator>\r\n            </NavigationContainer>\r\n            }\r\n        </AuthContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}